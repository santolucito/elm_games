Elm.Breakout = Elm.Breakout || {};
Elm.Breakout.make = function (_elm) {
   "use strict";
   _elm.Breakout = _elm.Breakout || {};
   if (_elm.Breakout.values)
   return _elm.Breakout.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Breakout",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Keyboard = Elm.Keyboard.make(_elm),
   $List = Elm.List.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $String = Elm.String.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Time = Elm.Time.make(_elm),
   $Touch = Elm.Touch.make(_elm),
   $Window = Elm.Window.make(_elm);
   var display = F2(function (background,
   foreground) {
      return $Graphics$Element.layers(_L.fromArray([background
                                                   ,foreground]));
   });
   var noForm = $Graphics$Collage.filled(A4($Color.rgba,
   0,
   0,
   0,
   0))(A2($Graphics$Collage.rect,
   0,
   0));
   var make = F3(function (color,
   obj,
   shape) {
      return $Graphics$Collage.move({ctor: "_Tuple2"
                                    ,_0: obj.x
                                    ,_1: obj.y})($Graphics$Collage.filled(color)(shape));
   });
   var weightedAvg = F2(function (values,
   weights) {
      return function () {
         var weightedVals = A3($List.map2,
         F2(function (x,y) {
            return x * y;
         }),
         values,
         weights);
         return $List.sum(weightedVals) / $List.sum(weights);
      }();
   });
   var stepV = F3(function (v,
   lowerCollision,
   upperCollision) {
      return lowerCollision ? $Basics.abs(v) : upperCollision ? 0 - $Basics.abs(v) : v;
   });
   var near = F3(function (k,c,n) {
      return _U.cmp(n,
      k - c) > -1 && _U.cmp(n,
      k + c) < 1;
   });
   var within = F2(function (ball,
   box) {
      return A2(near,
      box.x,
      ball.r + box.w / 2)(ball.x) && A2(near,
      box.y,
      ball.r + box.h / 2)(ball.y);
   });
   var stepObj = F2(function (t,
   _v0) {
      return function () {
         return _U.replace([["x"
                            ,_v0.x + _v0.vx * t]
                           ,["y",_v0.y + _v0.vy * t]],
         _v0);
      }();
   });
   var Game = F6(function (a,
   b,
   c,
   d,
   e,
   f) {
      return {_: {}
             ,bricks: d
             ,contacts: f
             ,gameBall: b
             ,player: c
             ,spareBalls: e
             ,state: a};
   });
   var brick = F4(function (x,
   y,
   w,
   h) {
      return {_: {}
             ,h: h
             ,w: w
             ,x: x
             ,y: y};
   });
   var player = F6(function (x,
   y,
   vx,
   vy,
   w,
   h) {
      return {_: {}
             ,h: h
             ,vx: vx
             ,vy: vy
             ,w: w
             ,x: x
             ,y: y};
   });
   var ball = F5(function (x,
   y,
   vx,
   vy,
   r) {
      return {_: {}
             ,r: r
             ,vx: vx
             ,vy: vy
             ,x: x
             ,y: y};
   });
   var Lost = {ctor: "Lost"};
   var Won = {ctor: "Won"};
   var Serve = {ctor: "Serve"};
   var Play = {ctor: "Play"};
   var Sized = F3(function (a,
   b,
   c) {
      return _U.insert("h",
      b,
      _U.insert("w",a,c));
   });
   var Moving = F3(function (a,
   b,
   c) {
      return _U.insert("vy",
      b,
      _U.insert("vx",a,c));
   });
   var Positioned = F3(function (a,
   b,
   c) {
      return _U.insert("y",
      b,
      _U.insert("x",a,c));
   });
   var Input = F3(function (a,
   b,
   c) {
      return {_: {}
             ,delta: c
             ,dir: b
             ,space: a};
   });
   var maybe = F3(function (def,
   f,
   val) {
      return A2($Maybe.withDefault,
      def,
      A2($Maybe.map,f,val));
   });
   var touchInQuadrant = F3(function (q,
   _v2,
   touch) {
      return function () {
         switch (_v2.ctor)
         {case "_Tuple2":
            return function () {
                 var $ = function () {
                    switch (q)
                    {case 1: return {ctor: "_Tuple3"
                                    ,_0: true
                                    ,_1: F2(function (x,y) {
                                       return _U.cmp(x,y) > 0;
                                    })
                                    ,_2: F2(function (x,y) {
                                       return _U.cmp(x,y) < 0;
                                    })};
                       case 2: return {ctor: "_Tuple3"
                                      ,_0: true
                                      ,_1: F2(function (x,y) {
                                         return _U.cmp(x,y) < 0;
                                      })
                                      ,_2: F2(function (x,y) {
                                         return _U.cmp(x,y) < 0;
                                      })};
                       case 3: return {ctor: "_Tuple3"
                                      ,_0: true
                                      ,_1: F2(function (x,y) {
                                         return _U.cmp(x,y) < 0;
                                      })
                                      ,_2: F2(function (x,y) {
                                         return _U.cmp(x,y) > 0;
                                      })};
                       case 4: return {ctor: "_Tuple3"
                                      ,_0: true
                                      ,_1: F2(function (x,y) {
                                         return _U.cmp(x,y) > 0;
                                      })
                                      ,_2: F2(function (x,y) {
                                         return _U.cmp(x,y) > 0;
                                      })};}
                    return {ctor: "_Tuple3"
                           ,_0: false
                           ,_1: F2(function (x,y) {
                              return _U.eq(x,y);
                           })
                           ,_2: F2(function (x,y) {
                              return _U.eq(x,y);
                           })};
                 }(),
                 qExists = $._0,
                 xCmp = $._1,
                 yCmp = $._2;
                 var $ = {ctor: "_Tuple2"
                         ,_0: $Basics.toFloat(touch.x)
                         ,_1: $Basics.toFloat(touch.y)},
                 x = $._0,
                 y = $._1;
                 var $ = {ctor: "_Tuple2"
                         ,_0: $Basics.toFloat(_v2._0) / 2
                         ,_1: $Basics.toFloat(_v2._1) / 2},
                 centerX = $._0,
                 centerY = $._1;
                 return qExists ? $Maybe.Just(A2(xCmp,
                 x,
                 centerX) && A2(yCmp,
                 y,
                 centerY)) : $Maybe.Nothing;
              }();}
         _U.badCase($moduleName,
         "between lines 89 and 99");
      }();
   });
   var touchUpperRight = function ($) {
      return F2(function (x,y) {
         return function ($) {
            return x(y($));
         };
      })(A2(maybe,
      false,
      $Basics.identity))(touchInQuadrant(1)($));
   };
   var touchUpperLeft = function ($) {
      return F2(function (x,y) {
         return function ($) {
            return x(y($));
         };
      })(A2(maybe,
      false,
      $Basics.identity))(touchInQuadrant(2)($));
   };
   var touchUpper = F2(function (_v7,
   t) {
      return function () {
         switch (_v7.ctor)
         {case "_Tuple2":
            return A2(touchUpperLeft,
              {ctor: "_Tuple2"
              ,_0: _v7._0
              ,_1: _v7._1},
              t) || A2(touchUpperRight,
              {ctor: "_Tuple2"
              ,_0: _v7._0
              ,_1: _v7._1},
              t);}
         _U.badCase($moduleName,
         "on line 119, column 22 to 71");
      }();
   });
   var spaceSignal = function () {
      var f = F3(function (space,
      touches,
      _v11) {
         return function () {
            switch (_v11.ctor)
            {case "_Tuple2":
               return space || A2($List.any,
                 touchUpper({ctor: "_Tuple2"
                            ,_0: _v11._0
                            ,_1: _v11._1}),
                 touches);}
            _U.badCase($moduleName,
            "on line 125, column 29 to 73");
         }();
      });
      return A4($Signal.map3,
      f,
      $Keyboard.space,
      $Touch.touches,
      $Window.dimensions);
   }();
   var touchLowerLeft = function ($) {
      return F2(function (x,y) {
         return function ($) {
            return x(y($));
         };
      })(A2(maybe,
      false,
      $Basics.identity))(touchInQuadrant(3)($));
   };
   var touchLowerRight = function ($) {
      return F2(function (x,y) {
         return function ($) {
            return x(y($));
         };
      })(A2(maybe,
      false,
      $Basics.identity))(touchInQuadrant(4)($));
   };
   var dirSignal = function () {
      var f = F3(function (arrows,
      touches,
      _v15) {
         return function () {
            switch (_v15.ctor)
            {case "_Tuple2":
               return function () {
                    var touchRight = A2($List.any,
                    touchLowerRight({ctor: "_Tuple2"
                                    ,_0: _v15._0
                                    ,_1: _v15._1}),
                    touches) ? 1 : 0;
                    var touchLeft = A2($List.any,
                    touchLowerLeft({ctor: "_Tuple2"
                                   ,_0: _v15._0
                                   ,_1: _v15._1}),
                    touches) ? 1 : 0;
                    return arrows.x + touchRight - touchLeft;
                 }();}
            _U.badCase($moduleName,
            "between lines 135 and 139");
         }();
      });
      return A4($Signal.map3,
      f,
      $Keyboard.arrows,
      $Touch.touches,
      $Window.dimensions);
   }();
   var quadrantCol = A4($Color.rgba,
   0,
   0,
   0,
   0.4);
   var displayQuadrants = F2(function (_v19,
   state) {
      return function () {
         switch (_v19.ctor)
         {case "_Tuple2":
            return function () {
                 var grid = $Graphics$Collage.group(_L.fromArray([$Graphics$Collage.traced($Graphics$Collage.solid(quadrantCol))(_L.fromArray([{ctor: "_Tuple2"
                                                                                                                                               ,_0: 0
                                                                                                                                               ,_1: 0}
                                                                                                                                              ,{ctor: "_Tuple2"
                                                                                                                                               ,_0: 0
                                                                                                                                               ,_1: (0 - _v19._1) / 2}]))
                                                                 ,$Graphics$Collage.traced($Graphics$Collage.solid(quadrantCol))(_L.fromArray([{ctor: "_Tuple2"
                                                                                                                                               ,_0: (0 - _v19._0) / 2
                                                                                                                                               ,_1: 0}
                                                                                                                                              ,{ctor: "_Tuple2"
                                                                                                                                               ,_0: _v19._0 / 2
                                                                                                                                               ,_1: 0}]))]));
                 return _U.eq(state,
                 Serve) ? grid : noForm;
              }();}
         _U.badCase($moduleName,
         "between lines 368 and 374");
      }();
   });
   var textBlue = A3($Color.rgb,
   160,
   160,
   200);
   var txt = function (f) {
      return function ($) {
         return $Graphics$Element.leftAligned(f($Text.monospace($Text.color(textBlue)($Text.fromString($)))));
      };
   };
   var breakoutBlue = A3($Color.rgb,
   60,
   60,
   100);
   var endTextHeight = 24;
   var brickColorFactor = 1.0e-2;
   var brickColor = function (b) {
      return A3($Color.hsl,
      brickColorFactor * (b.x + b.y),
      1,
      0.5);
   };
   var lostMsg = "Serve to restart. ;)";
   var wonMsg = "Congratulations! Serve to restart.";
   var manualMsg = A2($Basics._op["++"],
   "SPACE to serve, &larr; and &rarr; to move;",
   " or just touch the quadrants");
   var speedFactor = 1;
   var pointsPerContact = -1;
   var pointsPerBall = -10;
   var pointsPerBrick = 100;
   var brickCols = 7;
   var brickRows = 6;
   var startSpareBalls = 2;
   var calcPoints = F3(function (bricksLeft,
   spareBalls,
   contacts) {
      return function () {
         var maxBricks = brickRows * brickCols;
         var maxPoints = pointsPerBrick * maxBricks;
         var bricksGone = maxBricks - bricksLeft;
         var points = pointsPerBrick * bricksGone + pointsPerBall * (startSpareBalls - spareBalls) + pointsPerContact * contacts;
         return {ctor: "_Tuple2"
                ,_0: points
                ,_1: maxPoints};
      }();
   });
   var pointsText = F3(function (bricksLeft,
   spareBalls,
   contacts) {
      return function () {
         var $ = A3(calcPoints,
         bricksLeft,
         spareBalls,
         contacts),
         points = $._0,
         maxPoints = $._1;
         var maxPointsStrLen = $String.length($Basics.toString(maxPoints));
         return A2($Basics._op["++"],
         "points: ",
         A2($String.padLeft,
         maxPointsStrLen,
         _U.chr(" "))($Basics.toString(points)));
      }();
   });
   var ballRadius = 7;
   var brickHeight = 10;
   var brickWidth = 50;
   var brickDistY = 33;
   var brickDistX = 80;
   var brickRow = function (y) {
      return function () {
         var xOff = $Basics.toFloat($Basics.ceiling((0 - brickCols) / 2)) * brickDistX;
         return A2($List.map,
         function (x) {
            return A4(brick,
            brickDistX * x + xOff,
            y,
            brickWidth,
            brickHeight);
         },
         _L.range(0,brickCols - 1));
      }();
   };
   var speedIncY = 1.02;
   var speedIncX = 1.01;
   var speedUp = function (_v23) {
      return function () {
         return _U.replace([["vx"
                            ,speedIncX * _v23.vx]
                           ,["vy",speedIncY * _v23.vy]],
         _v23);
      }();
   };
   var goBrickHits = F2(function (brick,
   _v25) {
      return function () {
         switch (_v25.ctor)
         {case "_Tuple2":
            return function () {
                 var hit = A2(within,
                 _v25._0,
                 brick);
                 var bricks$ = hit ? _v25._1 : A2($List._op["::"],
                 brick,
                 _v25._1);
                 var ball$ = hit ? speedUp(_U.replace([["vy"
                                                       ,0 - _v25._0.vy]],
                 _v25._0)) : _v25._0;
                 return {ctor: "_Tuple2"
                        ,_0: ball$
                        ,_1: bricks$};
              }();}
         _U.badCase($moduleName,
         "between lines 258 and 263");
      }();
   });
   var serveSpeed = 200;
   var traction = 0.55;
   var stepServe = F2(function (_v29,
   _v30) {
      return function () {
         return function () {
            return function () {
               var state$ = _v29.space ? Play : Serve;
               var newBall = A5(ball,
               _v30.player.x,
               _v30.player.y + _v30.player.h / 2 + _v30.gameBall.r + 1,
               traction * _v30.player.vx,
               serveSpeed,
               _v30.gameBall.r);
               return _U.replace([["state"
                                  ,state$]
                                 ,["gameBall",newBall]],
               _v30);
            }();
         }();
      }();
   });
   var brake = 0.7;
   var paddleHeight = 4;
   var paddleWidths = 52;
   var paddleSpeed = 110;
   var framesPerSecond = 30;
   var delta = $Signal.map(function (d) {
      return speedFactor * d;
   })(A2($Signal._op["<~"],
   $Time.inSeconds,
   $Time.fps(framesPerSecond)));
   var input = A2($Signal.sampleOn,
   delta,
   A2($Signal._op["~"],
   A2($Signal._op["~"],
   A2($Signal._op["<~"],
   Input,
   spaceSignal),
   dirSignal),
   delta));
   var $ = {ctor: "_Tuple2"
           ,_0: 600
           ,_1: 400},
   gameWidth = $._0,
   gameHeight = $._1;
   var $ = {ctor: "_Tuple2"
           ,_0: $Basics.toFloat(gameWidth) / 2
           ,_1: $Basics.toFloat(gameHeight) / 2},
   halfWidth = $._0,
   halfHeight = $._1;
   var msgTextPosY = 20 - halfHeight;
   var pointsTextPos = {ctor: "_Tuple2"
                       ,_0: 64 - halfWidth
                       ,_1: halfHeight - 10};
   var spareBallsTextPos = {ctor: "_Tuple2"
                           ,_0: halfWidth - 69
                           ,_1: halfHeight - 10};
   var stepBall = F5(function (t,
   _v33,
   p,
   bricks,
   contacts) {
      return function () {
         return function () {
            var hitCeiling = _U.cmp(_v33.y,
            halfHeight - _v33.r) > 0;
            var hitPlayer = A2(within,
            _v33,
            p);
            var contacts$ = hitPlayer ? contacts + 1 : contacts;
            var newVx = hitPlayer ? A2(weightedAvg,
            _L.fromArray([p.vx,_v33.vx]),
            _L.fromArray([traction
                         ,1 - traction])) : A3(stepV,
            _v33.vx,
            _U.cmp(_v33.x,
            _v33.r - halfWidth) < 0,
            _U.cmp(_v33.x,
            halfWidth - _v33.r) > 0);
            var ball$ = A2(stepObj,
            t,
            _U.replace([["vx",newVx]
                       ,["vy"
                        ,A3(stepV,
                        _v33.vy,
                        hitPlayer,
                        hitCeiling)]],
            _v33));
            return {ctor: "_Tuple2"
                   ,_0: A3($List.foldr,
                   goBrickHits,
                   {ctor: "_Tuple2"
                   ,_0: ball$
                   ,_1: _L.fromArray([])},
                   bricks)
                   ,_1: contacts$};
         }();
      }();
   });
   var stepPlayer = F3(function (t,
   dir,
   p) {
      return function () {
         var p1 = A2(stepObj,
         t,
         _U.replace([["vx"
                     ,p.vx * brake + $Basics.toFloat(dir) * paddleSpeed]],
         p));
         return _U.replace([["x"
                            ,A3($Basics.clamp,
                            p.w / 2 - halfWidth,
                            halfWidth - p.w / 2,
                            p1.x)]],
         p1);
      }();
   });
   var stepPlay = F2(function (_v35,
   _v36) {
      return function () {
         return function () {
            return function () {
               var _ = A5(stepBall,
               _v35.delta,
               _v36.gameBall,
               _v36.player,
               _v36.bricks,
               _v36.contacts);
               var ball$ = function () {
                  switch (_.ctor)
                  {case "_Tuple2":
                     switch (_._0.ctor)
                       {case "_Tuple2":
                          return _._0._0;}
                       break;}
                  _U.badCase($moduleName,
                  "on line 313, column 7 to 53");
               }();
               var bricks$ = function () {
                  switch (_.ctor)
                  {case "_Tuple2":
                     switch (_._0.ctor)
                       {case "_Tuple2":
                          return _._0._1;}
                       break;}
                  _U.badCase($moduleName,
                  "on line 313, column 7 to 53");
               }();
               var contacts$ = function () {
                  switch (_.ctor)
                  {case "_Tuple2":
                     switch (_._0.ctor)
                       {case "_Tuple2": return _._1;}
                       break;}
                  _U.badCase($moduleName,
                  "on line 313, column 7 to 53");
               }();
               var ballLost = _U.cmp(_v36.gameBall.y - _v36.gameBall.r,
               0 - halfHeight) < 0;
               var gameOver = ballLost && _U.eq(_v36.spareBalls,
               0);
               var spareBalls$ = ballLost ? _v36.spareBalls - 1 : _v36.spareBalls;
               var state$ = gameOver ? Lost : ballLost ? Serve : $List.isEmpty(_v36.bricks) ? Won : Play;
               return _U.replace([["state"
                                  ,state$]
                                 ,["gameBall",ball$]
                                 ,["bricks",bricks$]
                                 ,["spareBalls"
                                  ,A2($Basics.max,0,spareBalls$)]
                                 ,["contacts",contacts$]],
               _v36);
            }();
         }();
      }();
   });
   var paddleYPos = 40 - gameHeight / 2;
   var defaultGame = {_: {}
                     ,bricks: $List.concat($List.map(brickRow)(A2($List.map,
                     F2(function (x,y) {
                        return x * y;
                     })(brickDistY),
                     _L.range(0,brickRows - 1))))
                     ,contacts: 0
                     ,gameBall: A5(ball,
                     0,
                     paddleYPos + ballRadius,
                     0,
                     0,
                     ballRadius)
                     ,player: A6(player,
                     0,
                     paddleYPos,
                     0,
                     0,
                     paddleWidths,
                     paddleHeight)
                     ,spareBalls: startSpareBalls
                     ,state: Serve};
   var stepGameOver = F2(function (_v54,
   _v55) {
      return function () {
         return function () {
            return _v54.space ? defaultGame : _v55;
         }();
      }();
   });
   var stepGame = F2(function (_v58,
   _v59) {
      return function () {
         return function () {
            return function () {
               var func = _U.eq(_v59.state,
               Play) ? stepPlay : _U.eq(_v59.state,
               Serve) ? stepServe : stepGameOver;
               return A2(func,
               _v58,
               _U.replace([["player"
                           ,A3(stepPlayer,
                           _v58.delta,
                           _v58.dir,
                           _v59.player)]],
               _v59));
            }();
         }();
      }();
   });
   var gameState = A3($Signal.foldp,
   stepGame,
   defaultGame,
   input);
   var bricksSignal = $Signal.dropRepeats(A2($Signal._op["<~"],
   function (_) {
      return _.bricks;
   },
   gameState));
   var displayFullScreen = F2(function (_v62,
   content) {
      return function () {
         switch (_v62.ctor)
         {case "_Tuple2":
            return function () {
                 var gameScale = A2($Basics.min,
                 $Basics.toFloat(_v62._0) / gameWidth,
                 $Basics.toFloat(_v62._1) / gameHeight);
                 return A3($Graphics$Collage.collage,
                 _v62._0,
                 _v62._1,
                 _L.fromArray([$Graphics$Collage.scale(gameScale)(content)]));
              }();}
         _U.badCase($moduleName,
         "between lines 447 and 450");
      }();
   });
   var displayBricks = F2(function (_v66,
   bricks) {
      return function () {
         switch (_v66.ctor)
         {case "_Tuple2":
            return function () {
                 var gameScale = A2($Basics.min,
                 $Basics.toFloat(_v66._0) / gameWidth,
                 $Basics.toFloat(_v66._1) / gameHeight);
                 var brickRects = $Graphics$Collage.group(A2($List.map,
                 function (b) {
                    return A2(make,
                    brickColor(b),
                    b)(A2($Graphics$Collage.rect,
                    b.w,
                    b.h));
                 },
                 bricks));
                 var background = $Graphics$Collage.filled(breakoutBlue)(A2($Graphics$Collage.rect,
                 gameWidth,
                 gameHeight));
                 return A2(displayFullScreen,
                 {ctor: "_Tuple2"
                 ,_0: _v66._0
                 ,_1: _v66._1},
                 $Graphics$Collage.group(_L.fromArray([background
                                                      ,brickRects])));
              }();}
         _U.badCase($moduleName,
         "between lines 402 and 408");
      }();
   });
   var background = A2($Signal._op["~"],
   A2($Signal._op["<~"],
   displayBricks,
   $Window.dimensions),
   bricksSignal);
   var displayForeground = F2(function (_v70,
   _v71) {
      return function () {
         return function () {
            switch (_v70.ctor)
            {case "_Tuple2":
               return function () {
                    var quadrants = A2(displayQuadrants,
                    {ctor: "_Tuple2"
                    ,_0: gameWidth
                    ,_1: gameHeight},
                    _v71.state);
                    var showEndText = _U.eq(_v71.state,
                    Won) || _U.eq(_v71.state,Lost);
                    var endMsg = function () {
                       var _v76 = _v71.state;
                       switch (_v76.ctor)
                       {case "Lost": return lostMsg;
                          case "Won": return wonMsg;}
                       return "";
                    }();
                    var serveTextForm = _U.eq(_v71.state,
                    Serve) ? $Graphics$Collage.move({ctor: "_Tuple2"
                                                    ,_0: 0
                                                    ,_1: msgTextPosY})($Graphics$Collage.toForm(A2(txt,
                    $Basics.identity,
                    manualMsg))) : noForm;
                    var paddle = A2(make,
                    $Color.darkGray,
                    _v71.player)(A2($Graphics$Collage.rect,
                    _v71.player.w,
                    _v71.player.h));
                    var ball = A2(make,
                    $Color.lightGray,
                    _v71.gameBall)($Graphics$Collage.circle(_v71.gameBall.r));
                    var spareBallsMsg = A2($Basics._op["++"],
                    "spare balls: ",
                    $Basics.toString(_v71.spareBalls));
                    var spareBallsForm = $Graphics$Collage.move(spareBallsTextPos)($Graphics$Collage.toForm(A2(txt,
                    $Basics.identity,
                    spareBallsMsg)));
                    var pointsMsg = A3(pointsText,
                    $List.length(_v71.bricks),
                    _v71.spareBalls,
                    _v71.contacts);
                    var endText = A2(txt,
                    $Text.height(endTextHeight),
                    A2($Basics._op["++"],
                    pointsMsg,
                    A2($Basics._op["++"],
                    "\n",
                    endMsg)));
                    var endTextForm = showEndText ? $Graphics$Collage.toForm(endText) : noForm;
                    var pointsTextForm = $Graphics$Collage.move(pointsTextPos)($Graphics$Collage.toForm(A2(txt,
                    $Basics.identity,
                    pointsMsg)));
                    return displayFullScreen({ctor: "_Tuple2"
                                             ,_0: _v70._0
                                             ,_1: _v70._1})($Graphics$Collage.group(_L.fromArray([paddle
                                                                                                 ,ball
                                                                                                 ,serveTextForm
                                                                                                 ,pointsTextForm
                                                                                                 ,spareBallsForm
                                                                                                 ,endTextForm
                                                                                                 ,quadrants])));
                 }();}
            _U.badCase($moduleName,
            "between lines 413 and 442");
         }();
      }();
   });
   var foreground = A2($Signal._op["~"],
   A2($Signal._op["<~"],
   displayForeground,
   $Window.dimensions),
   gameState);
   var main = A2($Signal._op["~"],
   A2($Signal._op["<~"],
   display,
   background),
   foreground);
   _elm.Breakout.values = {_op: _op
                          ,gameHeight: gameHeight
                          ,gameWidth: gameWidth
                          ,halfHeight: halfHeight
                          ,halfWidth: halfWidth
                          ,framesPerSecond: framesPerSecond
                          ,paddleSpeed: paddleSpeed
                          ,paddleWidths: paddleWidths
                          ,paddleHeight: paddleHeight
                          ,brake: brake
                          ,traction: traction
                          ,serveSpeed: serveSpeed
                          ,speedIncX: speedIncX
                          ,speedIncY: speedIncY
                          ,paddleYPos: paddleYPos
                          ,brickDistX: brickDistX
                          ,brickDistY: brickDistY
                          ,brickWidth: brickWidth
                          ,brickHeight: brickHeight
                          ,ballRadius: ballRadius
                          ,startSpareBalls: startSpareBalls
                          ,brickRows: brickRows
                          ,brickCols: brickCols
                          ,pointsPerBrick: pointsPerBrick
                          ,pointsPerBall: pointsPerBall
                          ,pointsPerContact: pointsPerContact
                          ,speedFactor: speedFactor
                          ,manualMsg: manualMsg
                          ,wonMsg: wonMsg
                          ,lostMsg: lostMsg
                          ,brickColorFactor: brickColorFactor
                          ,endTextHeight: endTextHeight
                          ,msgTextPosY: msgTextPosY
                          ,pointsTextPos: pointsTextPos
                          ,spareBallsTextPos: spareBallsTextPos
                          ,breakoutBlue: breakoutBlue
                          ,textBlue: textBlue
                          ,quadrantCol: quadrantCol
                          ,touchInQuadrant: touchInQuadrant
                          ,maybe: maybe
                          ,touchUpperRight: touchUpperRight
                          ,touchUpperLeft: touchUpperLeft
                          ,touchLowerLeft: touchLowerLeft
                          ,touchLowerRight: touchLowerRight
                          ,touchUpper: touchUpper
                          ,spaceSignal: spaceSignal
                          ,dirSignal: dirSignal
                          ,delta: delta
                          ,Input: Input
                          ,input: input
                          ,Positioned: Positioned
                          ,Moving: Moving
                          ,Sized: Sized
                          ,Play: Play
                          ,Serve: Serve
                          ,Won: Won
                          ,Lost: Lost
                          ,ball: ball
                          ,player: player
                          ,brick: brick
                          ,brickRow: brickRow
                          ,Game: Game
                          ,defaultGame: defaultGame
                          ,stepObj: stepObj
                          ,near: near
                          ,within: within
                          ,stepV: stepV
                          ,speedUp: speedUp
                          ,weightedAvg: weightedAvg
                          ,goBrickHits: goBrickHits
                          ,stepBall: stepBall
                          ,stepPlayer: stepPlayer
                          ,stepGame: stepGame
                          ,stepPlay: stepPlay
                          ,stepServe: stepServe
                          ,stepGameOver: stepGameOver
                          ,gameState: gameState
                          ,txt: txt
                          ,make: make
                          ,brickColor: brickColor
                          ,noForm: noForm
                          ,displayQuadrants: displayQuadrants
                          ,calcPoints: calcPoints
                          ,pointsText: pointsText
                          ,displayBricks: displayBricks
                          ,displayForeground: displayForeground
                          ,displayFullScreen: displayFullScreen
                          ,bricksSignal: bricksSignal
                          ,background: background
                          ,foreground: foreground
                          ,display: display
                          ,main: main};
   return _elm.Breakout.values;
};