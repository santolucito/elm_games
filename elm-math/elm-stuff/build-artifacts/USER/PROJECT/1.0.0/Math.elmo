Elm.Math = Elm.Math || {};
Elm.Math.make = function (_elm) {
   "use strict";
   _elm.Math = _elm.Math || {};
   if (_elm.Math.values)
   return _elm.Math.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   $moduleName = "Math",
   $Basics = Elm.Basics.make(_elm),
   $Graphics$Collage = Elm.Graphics.Collage.make(_elm),
   $Html = Elm.Html.make(_elm),
   $Html$Events = Elm.Html.Events.make(_elm),
   $List = Elm.List.make(_elm),
   $Markdown = Elm.Markdown.make(_elm),
   $Maybe = Elm.Maybe.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $StartApp = Elm.StartApp.make(_elm);
   var $eval = F2(function (op,l) {
      return function () {
         switch (op)
         {case "+": return A2($List.map,
              function (x) {
                 return x + 1;
              },
              l);
            case "-": return A2($List.map,
              function (x) {
                 return x - 1;
              },
              l);}
         _U.badCase($moduleName,
         "between lines 61 and 63");
      }();
   });
   var lastList = function (l) {
      return A2($Maybe.withDefault,
      _L.fromArray([]),
      $List.head($List.reverse(l)));
   };
   var initList = function (l) {
      return $List.reverse($Maybe.withDefault(l)($List.tail($List.reverse(l))));
   };
   var update = F2(function (action,
   model) {
      return function () {
         switch (action.ctor)
         {case "ApplyOp":
            return function () {
                 var newL = $eval(action._0)(lastList(model.listSeq));
                 return _U.replace([["listSeq"
                                    ,A2($List.append,
                                    model.listSeq,
                                    _L.fromArray([newL]))]],
                 model);
              }();
            case "RemoveOp":
            return _U.replace([["listSeq"
                               ,initList(model.listSeq)]],
              model);}
         _U.badCase($moduleName,
         "between lines 38 and 51");
      }();
   });
   var RemoveOp = {ctor: "RemoveOp"};
   var ApplyOp = function (a) {
      return {ctor: "ApplyOp"
             ,_0: a};
   };
   var view = F2(function (address,
   model) {
      return function () {
         var mkButt = function (op) {
            return A2($Html.button,
            _L.fromArray([A2($Html$Events.onClick,
            address,
            ApplyOp(op))]),
            _L.fromArray([$Html.text(A2($Basics._op["++"],
            "Map ",
            A2($Basics._op["++"],
            op,
            "1")))]));
         };
         var buttons = A2($List.map,
         mkButt,
         _L.fromArray(["+","-"]));
         var f = F2(function (s,d) {
            return $Graphics$Collage.moveY(d * -30)($Graphics$Collage.toForm($Markdown.toElement($Basics.toString(s))));
         });
         var lists = _L.fromArray([$Html.fromElement(A2($Graphics$Collage.collage,
         100,
         300)(A3($List.map2,
         f,
         model.listSeq,
         _L.range(0,100))))]);
         return A2($Html.div,
         _L.fromArray([]),
         A2($List.append,buttons,lists));
      }();
   });
   var initM = {_: {}
               ,listSeq: _L.fromArray([_L.fromArray([1
                                                    ,2
                                                    ,3])])};
   var main = $StartApp.start({_: {}
                              ,model: initM
                              ,update: update
                              ,view: view});
   var Model = function (a) {
      return {_: {},listSeq: a};
   };
   _elm.Math.values = {_op: _op
                      ,Model: Model
                      ,initM: initM
                      ,ApplyOp: ApplyOp
                      ,RemoveOp: RemoveOp
                      ,update: update
                      ,initList: initList
                      ,lastList: lastList
                      ,$eval: $eval
                      ,view: view
                      ,main: main};
   return _elm.Math.values;
};